# Understand behavior of method when we vary the "decline to give prediction" parameter (delta)

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

CONFIGS = {
    "simple_2d": {
        "num_p": 2,
        "act_func": "relu",
        "std_dev_x": 20,
        "parametric_form": "gaussian",
        "density_layer_sizes": "2+15",
        "density_weight_param": [0.0001],
        "decision_weight_param": [0.0001],
        "do_no_harm": [0.001],
    },
}

nest.add(
    'sim_func',
    [
	'simple_2d',
    ],
)

nest.add(
    'num_train',
    [2400],
    label_func=lambda c: 'num_train%d' % c,
)

nest.add(
    'seed',
    [1],
    label_func=lambda c: 'seed%d' % c,
)

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    config_dict = CONFIGS[c['sim_func']]
    targets = [
        join(outdir, 'obs_data.pkl'),
        join(outdir, 'data_log.txt')]
    cmd = [
        'python generate_data.py',
        '--seed',
        c['seed'],
        '--num-p',
        config_dict['num_p'],
        '--num-train',
        c['num_train'],
        '--sim-func',
        c['sim_func'],
        '--std-dev-x',
        config_dict['std_dev_x'],
        '--max-x 10',
        '--out-data-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'fold_idx',
    [0],
    label_func=lambda c: 'fold_idx%d' % c,
)
@nest.add_target_with_env(localenv)
def split_data(env, outdir, c):
    targets = [
        join(outdir, 'obs_data_split.pkl')]
    cmd = [
        'python create_data_split.py',
        '--seed',
        c['seed'],
        '--k-fold 3',
        '--fold-idx',
        c['fold_idx'],
        '--in-data-file ${SOURCES[0]}',
        '--out-file ${TARGETS[0]}']
    return env.Command(
        targets,
        c['generate'],
        ' '.join(map(str, cmd)))

nest.add_aggregate('aggregate_models', list)
nest.add_aggregate('aggregate_coverages', list)

nest.add(
    'cost_decline',
    [1.2,1.6],
    label_func=lambda c: 'cost_decline%.2f' % c,
)

@nest.add_target_with_env(localenv)
def fit_neural_networks(env, outdir, c):
    config_dict = CONFIGS[c["sim_func"]]
    targets = [
        join(outdir, 'fit_nn.pkl'),
        join(outdir, 'fit_nn_log.txt')]
    sources = [
        c['generate'][0],
        c['split_data'][0]]
    cmd = [
        'python fit_simultaneous_decision_density_nn.py',
        '--seed 2',
        '--data-file ${SOURCES[0]}',
        '--data-split-file ${SOURCES[1]}',
        '--density-parametric-form',
        config_dict["parametric_form"],
        '--density-layer-sizes',
        config_dict["density_layer_sizes"],
        '--density-weight-param',
        ",".join(map(str, config_dict["density_weight_param"])),
        '--decision-weight-param',
        ",".join(map(str, config_dict["decision_weight_param"])),
        '--do-no-harm',
        ",".join(map(str, config_dict["do_no_harm"])),
        '--cost-decline',
        c['cost_decline'],
        '--act-func',
        config_dict['act_func'],
        '--cv 2',
        '--num-init 1',
        '--max-iter 10000',
        '--log-barrier 0.0001',
        '--learning-rate 0.001',
        '--fitted-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    c['aggregate_models'].append(targets[0])
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

nest.pop('cost_decline')

@nest.add_target_with_env(localenv)
def plot_stuff(env, outdir, c):
    sources = [
	c['aggregate_models'],
	#c['aggregate_coverages'],
        c['generate'][0],
        c['split_data'][0]]
    num_to_agg = len(c['aggregate_models'])
    fitted_file_names = ",".join(["${SOURCES[%d]}" % i for i in range(num_to_agg)])
    #coverage_file_names = ",".join(["${SOURCES[%d]}" % (i + num_to_agg) for i in range(num_to_agg)])
    targets = [
        join(outdir, 'delta_diam.png'),
        join(outdir, 'delta_coverage.png'),
        join(outdir, 'delta_accept_prob.png'),
        join(outdir, 'delta_accept_region.png'),
    ]
    cmd = [
        'python plot_simulation_cost_decline.py',
        '--fitted-files',
        fitted_file_names,
        #'--coverage-files',
        #coverage_file_names,
        '--data-file ${SOURCES[%d]}' % (num_to_agg),
        '--data-split-file ${SOURCES[%d]}' % ( num_to_agg + 1),
        '--plot-diam-file ${TARGETS[0]}',
        '--plot-coverage-file ${TARGETS[1]}',
        '--plot-accept-file ${TARGETS[2]}',
        '--plot-accept-region-file ${TARGETS[3]}',
    ]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))
