# Tests the experiment where we hold out an age group (Remove age > 40 years)
# and compare performance on the in-sample and out-of-sample age groups
# Predicting length of stay

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

# THIS DATASET HAS BEEN PCA and WHITENed
# This data is obtainined by running
# python process_mimic_holdout_pca.py --holdout-age --holdout-min-age 40 --holdout-max-age 100 --num-pca 20 --in-train-data ../data/mimic/length-of-stay/mimic_los_train.pkl --in-test-data ../data/mimic/length-of-stay/mimic_los_test.pkl --out-train ../data/mimic/length-of-stay/mimic_los_train_holdout_pca.pkl --out-test ../data/mimic/length-of-stay/mimic_los_test_holdout_pca.pkl
TRAIN_DATA = "../data/mimic/length-of-stay/mimic_los_train_holdout_pca.pkl"
TEST_DATA = "../data/mimic/length-of-stay/mimic_los_test_holdout_pca.pkl"
KFOLDS = 3
FOLD_IDXS = [0]
LEARNING_RATE = 0.0005
COST_DECLINES = [0.23]
MAX_ITERS = 16000

config_dict = {
    "act_func": "relu",
    "interval_layer_sizes": "117+10+5",
    "interval_weight": [0.005],
    "decision_weight": [0.00001],
    "log_barrier": [0.0001],
    "weight_penalty_type": "ridge",
    "do_no_harm": [40],
    "support_sim_num": 12000,
    "max_iters": MAX_ITERS,
    "num_inits": 1,
    "alpha": 0.2,
}

nest.add(
    'cost_decline',
    COST_DECLINES,
    label_func=lambda c: 'cost_decline%s' % str(c),
)

nest.add_aggregate('aggregate_results', list)

nest.add(
    'seed',
    range(40,80),
    label_func=lambda c: 'seed%d' % c,
)
nest.add_aggregate('aggregate_nns', list)
nest.add_aggregate('aggregate_ulm_nns', list)

nest.add(
    'fold_idx',
    FOLD_IDXS,
    label_func=lambda c: 'fold_idx%d' % c,
)

@nest.add_target_with_env(localenv)
def split_data(env, outdir, c):
    targets = [
        join(outdir, 'obs_data_split.pkl')]
    cmd = [
        'python create_data_split.py',
        '--seed',
        c['seed'],
        '--k-fold',
        KFOLDS,
        '--fold-idx',
        c['fold_idx'],
        '--in-data-file',
        TRAIN_DATA,
        '--out-file ${TARGETS[0]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_plain_nns(env, outdir, c):
    targets = [
        join(outdir, 'fit_plain.pkl'),
        join(outdir, 'fit_plain_log.txt')]
    cmd = [
        'srun -p matsen_e,campus,restart --cpus-per-task 4',
        'python fit_interval_nn.py',
        '--seed',
        12 + int(c['fold_idx'] * 40) + c['seed'],
        '--data-file',
        TRAIN_DATA,
        '--data-split-file ${SOURCES[0]}',
        '--interval-alpha',
        config_dict["alpha"],
        '--interval-layer-sizes',
        config_dict["interval_layer_sizes"],
        '--interval-weight',
        ",".join(map(str, config_dict["interval_weight"])),
        '--weight-penalty ridge',
        '--act-func',
        config_dict['act_func'],
        '--cv 3',
        '--dropout 0',
        '--num-init',
        config_dict['num_inits'],
        '--max-iter',
        config_dict['max_iters'],
        '--learning-rate',
	LEARNING_RATE,
        '--fitted-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    c['aggregate_nns'].append(targets[0])
    return env.Command(
        targets,
        c['split_data'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_ulm_nns(env, outdir, c):
    targets = [
        join(outdir, 'fit_ulm_nn.pkl'),
        join(outdir, 'fit_ulm_nn_log.txt')]
    cmd = [
        'srun -p matsen_e,campus --cpus-per-task 4',
        'python fit_simultaneous_decision_interval_nn.py',
        '--seed',
        10 + int(c['fold_idx'] * 4) + c['seed'],
        '--data-file',
        TRAIN_DATA,
        '--data-split-file ${SOURCES[0]}',
        '--interval-alpha',
        config_dict["alpha"],
        '--interval-layer-sizes',
        config_dict["interval_layer_sizes"],
        '--interval-weight-param',
        ",".join(map(str, config_dict["interval_weight"])),
        '--decision-weight-param',
        ",".join(map(str, config_dict["decision_weight"])),
        '--log-barrier',
        ",".join(map(str, config_dict["log_barrier"])),
        '--weight-penalty-type',
        config_dict["weight_penalty_type"],
        '--do-no-harm',
        ",".join(map(str, config_dict["do_no_harm"])),
        '--cost-decline',
        c['cost_decline'],
        '--act-func',
        config_dict['act_func'],
        '--cv 3',
        '--num-init',
        config_dict['num_inits'],
        '--support-sim-num',
        config_dict['support_sim_num'],
        '--max-iter',
        int(config_dict['max_iters'] * 0.75),
        '--learning-rate',
        LEARNING_RATE,
        '--fitted-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    c['aggregate_ulm_nns'].append(targets[0])
    return env.Command(
        targets,
        c['split_data'],
        ' '.join(map(str, cmd)))

nest.pop('fold_idx')

@nest.add_target_with_env(localenv)
def plot(env, outdir, c):
    targets = [
        join(outdir, 'plot_log.txt'),
        join(outdir, 'results.pkl')]
    sources = [
        c['aggregate_ulm_nns'],
        c['aggregate_nns'],
    ]
    start_idx = 0
    result_file_names = []
    for model_res in sources:
        num_to_agg = len(model_res)
        result_file_names.append(
            ",".join(["${SOURCES[%d]}" % i for i in range(start_idx, start_idx + num_to_agg)]))
        start_idx += num_to_agg
    cmd = [
        'python plot_mimic_holdout.py',
        '--eps 0.1',
        '--cost-decline',
        c['cost_decline'],
        '--train-data-file',
        TRAIN_DATA,
        '--test-data-file',
        TEST_DATA,
        '--ulm-files',
        result_file_names[0],
        '--plain-files',
        result_file_names[1],
        '--log-file ${TARGETS[0]}',
        '--out-results ${TARGETS[1]}',
    ]
    c['aggregate_results'].append(targets[1])
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

nest.pop('seed')

@nest.add_target_with_env(localenv)
def aggregate(env, outdir, c):
    targets = [
        join(outdir, 'plot_log.txt')]
    sources = [
        c['aggregate_results'],
    ]
    start_idx = 0
    result_file_names = []
    for model_res in sources:
        num_to_agg = len(model_res)
        result_file_names.append(
            ",".join(["${SOURCES[%d]}" % i for i in range(start_idx, start_idx + num_to_agg)]))
        start_idx += num_to_agg
    cmd = [
        'python plot_aggregate_results.py',
        '--result-files',
        result_file_names[0],
        '--log-file ${TARGETS[0]}',
    ]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))
