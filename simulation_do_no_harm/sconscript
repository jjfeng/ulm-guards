# Understand behavior of method when we vary the "do no harm" parameter (lambda)

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

CONFIGS = {
    "constant_2d": {
        "num_p": 2,
        "parametric_form": "gaussian",
        "act_func": "relu",
        "density_layer_sizes": "2+10+10+10",
        "density_weight": [0.001],
        "decision_weight": [0.001],
    },
}

nest.add(
    'sim_func',
    [
    	'constant_2d'
    ],
)

nest.add(
    'num_train',
    [2400],
    label_func=lambda c: 'num_train%d' % c,
)

nest.add(
    'seed',
    [1],
    label_func=lambda c: 'model_seed%d' % c,
)

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    config_dict = CONFIGS[c['sim_func']]
    targets = [
        join(outdir, 'obs_data.pkl'),
        join(outdir, 'data_log.txt')]
    cmd = [
        'python generate_data.py',
        '--seed',
        c['seed'],
        '--num-p',
        config_dict['num_p'],
        '--num-train',
        c['num_train'],
        '--sim-func',
        c['sim_func'],
        '--sim-noise-sd 1',
        '--max-x 5',
        '--out-data-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'fold_idx',
    [0],
    label_func=lambda c: 'fold_idx%d' % c,
)
@nest.add_target_with_env(localenv)
def split_data(env, outdir, c):
    targets = [
        join(outdir, 'obs_data_split.pkl')]
    cmd = [
        'python create_data_split.py',
        '--seed',
        c['seed'],
        '--k-fold 3',
        '--fold-idx',
        c['fold_idx'],
        '--in-data-file ${SOURCES[0]}',
        '--out-file ${TARGETS[0]}']
    return env.Command(
        targets,
        c['generate'],
        ' '.join(map(str, cmd)))

nest.add(
    'cost_decline',
    [2.5],
    label_func=lambda c: 'cost_decline%.2f' % c,
)

nest.add_aggregate('aggregate_models', list)
nest.add(
    'do_no_harm',
    [1,3],
    label_func=lambda c: 'no_harm%.3f' % c,
)

@nest.add_target_with_env(localenv)
def fit_neural_networks(env, outdir, c):
    config_dict = CONFIGS[c["sim_func"]]
    targets = [
        join(outdir, 'fit_nn.pkl'),
        join(outdir, 'fit_nn_log.txt')]
    sources = [
        c['generate'][0],
        c['split_data'][0]]
    cmd = [
        'python fit_simultaneous_decision_density_nn.py',
        '--seed 1',
        '--data-file ${SOURCES[0]}',
        '--data-split-file ${SOURCES[1]}',
        '--density-parametric-form',
        config_dict["parametric_form"],
        '--density-layer-sizes',
        config_dict["density_layer_sizes"],
        '--density-weight',
        ",".join(map(str, config_dict["density_weight"])),
        '--decision-weight',
        ",".join(map(str, config_dict["decision_weight"])),
        '--do-no-harm',
        c['do_no_harm'],
        '--cost-decline',
        c['cost_decline'],
        '--act-func',
        config_dict['act_func'],
        '--cv 2',
        '--num-init 1',
        '--max-iter 30000',
        '--fitted-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    c['aggregate_models'].append(targets[0])
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

nest.pop('do_no_harm')

@nest.add_target_with_env(localenv)
def plot_stuff(env, outdir, c):
    sources = [
	c['aggregate_models'],
        c['generate'][0],
        c['split_data'][0]]
    num_to_agg = len(c['aggregate_models'])
    fitted_file_names = ",".join(["${SOURCES[%d]}" % i for i in range(num_to_agg)])
    targets = [
        join(outdir, 'validation_loss_lambda.png'),
        join(outdir, 'validation_loss_lambda_support_unif.png'),
        join(outdir, 'lambda_accept_prob.png'),
        join(outdir, 'lambda_accept_prob_support_unif.png'),
        join(outdir, 'lambda_accept_region.png'),
    ]
    cmd = [
        'python plot_simulation_do_no_harm.py',
        '--fitted-files',
        fitted_file_names,
        '--data-split-file ${SOURCES[%d]}' % (num_to_agg + 1),
        '--data-file ${SOURCES[%d]}' % num_to_agg,
        '--plot-val-loss-file ${TARGETS[0]}',
        '--plot-support-val-loss-file ${TARGETS[1]}',
        '--plot-accept-file ${TARGETS[2]}',
        '--plot-support-accept-file ${TARGETS[3]}',
        '--plot-accept-region-file ${TARGETS[4]}',
    ]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))
